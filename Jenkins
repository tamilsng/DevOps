ref

https://jenkins.io/doc/book/pipeline/#node

https://www.guru99.com/jenkins-pipeline-tutorial.html

What is Jenkins Pipeline?

> Group of events or jobs which are interlinked with one another in a sequence .

> Combination of plugins that support the integration and implemention of conti delivery pipelines .

build, deploy, test and release

> These events are interlinked with each other. Every state has its events, which work in a sequence called a continuous delivery pipeline.

-----------------------------------------------------------------------------------------------------------

What is a JenkinsFile?

> Jenkins pipeline defined using text file called Jenkinsfile 

> Implement the pipeline as code using jenkins file ( defined by using a domain specific language (DSL))

> JenkinsFile can be defined by either Web UI or with a JenkinsFile.

-----------------------------------------------------------------------------------------------------------

Why Use Jenkin's Pipeline?

> Jenkins is an open continuous integration server which has the ability to support the automation of software development processes .

> You can create multiple automation jobs with the help of use cases, and run them as a Jenkins pipeline.

reasons why you use should use Jenkins pipeline:

--> Jenkins pipeline is implemented as a code which allows multiple users to edit and execute the pipeline process.

--> Pipelines are robust. So if your server undergoes an unforeseen restart, the pipeline will be automatically resumed.

--> You can pause the pipeline process and make it wait to resume until there is an input from the user.

--> Jenkins Pipelines support big projects. You can run multiple jobs, and even use pipelines in a loop.

-----------------------------------------------------------------------------------------------------------

Declarative versus Scripted pipeline syntax:

two types of syntax used for defining your JenkinsFile.

1.Declarative
2.Scripted

Both declarative and scripted syntax are different from each other and are defined totally differently.

Declarative:

> offers an easy way to create pipelines . It contains a predefined hierarchy to create Jenkins pipelines .

> gives you the ability to control all aspects of a pipeline execution in a simple, straight-forward manner .

Scripted:

> runs on the Jenkins master with the help of a lightweight executor .

> It uses very few resources to translate the pipeline into atomic commands.

-----------------------------------------------------------------------------------------------------------

Pipeline concepts

pipeline / node / stage /step 

> Pipeline

--> A Pipeline is a user-defined model of a CD pipeline. A Pipelineâ€™s code defines your entire build process, which typically includes stages for building an application, testing it and then delivering it.

--> Also, a pipeline block is a key part of Declarative Pipeline syntax

> Node
 
--> A node is a machine which is part of the Jenkins environment and is capable of executing a Pipeline.

--> Also, a node block is a key part of Scripted Pipeline syntax.

> Stage

--> A stage block defines a list of tasks performed through the entire Pipeline (e.g. "Build", "Test" and "Deploy" stages), which is used by many plugins to visualize or present Jenkins Pipeline status/progress.

> Step
 
(A single task)

--> a step tells Jenkins what to do at a particular point in time (or "step" in the process). For example, to execute the shell command make use the sh step: sh 'make'. 

--> When a plugin extends the Pipeline DSL, [1] that typically means the plugin has implemented a new step .

Jenkinsfile (Declarative Pipeline)

pipeline {
    agent any #1
    stages {
        stage('Build') { #2
            steps {
                // #3
            }
        }
        stage('Test') { #4
            steps {
                //  #5
            }
        }
        stage('Deploy') { #6
            steps {
                // #7	
            }
        }
    }
}


#1 Execute this Pipeline or any of its stages, on any available agent.
#2 Defines the "Build" stage.
#3 Perform some steps related to the "Build" stage.
#4 Defines the "Test" stage.
#5 Perform some steps related to the "Test" stage.
#6 Defines the "Deploy" stage.
#7 Perform some steps related to the "Deploy" stage .

Be aware that both stages and steps (above) are common elements of both Declarative and Scripted Pipeline syntax .

Scripted Pipeline

> In Scripted Pipeline syntax, one or more node blocks do the core work throughout the entire Pipeline.


